/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems.V20220401
{
    /// <summary>
    /// Classification (browse node) associated with the item in the Amazon catalog for the indicated Amazon marketplace.
    /// </summary>
    [DataContract]
    public partial class ItemBrowseClassificationsByMarketplace : IEquatable<ItemBrowseClassificationsByMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBrowseClassificationsByMarketplace" /> class.
        /// </summary>
        [JsonConstructor]
        protected ItemBrowseClassificationsByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemBrowseClassificationsByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. (required).</param>
        /// <param name="classifications">Classification (browse node) Array of an Amazon catalog item.</param>
        public ItemBrowseClassificationsByMarketplace(string marketplaceId = default(string), List<ItemBrowseClassification> classifications = default(List<ItemBrowseClassification>))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemBrowseClassificationsByMarketplace and cannot be null");
            }
            else
            {
                MarketplaceId = marketplaceId;
            }
            Classifications = classifications;
        }

        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier.</value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Classifications of an Amazon catalog item.
        /// </summary>
        /// <value>Classifications of an Amazon catalog item.</value>
        [DataMember(Name = "classifications", EmitDefaultValue = false)]
        public List<ItemBrowseClassification> Classifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemDimensionsByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(this.MarketplaceId).Append("\n");
            sb.Append("  Classifications: ").Append(this.Classifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ItemBrowseClassificationsByMarketplace);
        }

        /// <summary>
        /// Returns true if ItemDimensionsByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemDimensionsByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemBrowseClassificationsByMarketplace input)
        {
            if (input == null)
                return false;

            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId)
                ) &&
                (
                    this.Classifications == input.Classifications ||
                    this.Classifications != null &&
                    this.Classifications.Equals(input.Classifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Classifications != null)
                    hashCode = hashCode * 59 + this.Classifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
